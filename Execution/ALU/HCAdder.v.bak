`include "include/lagartoII_const.vh"

module HCAdder (i_A, i_B, i_carryIn, o_Out, o_set, overflow);
    input   `WORD   i_A, i_B;
    input           i_carryIn;
    output  `WORD   o_Out;
    output          o_set, overflow;

    function integer log2;
        input [6:0] VALUE;
        for (log2=0; VALUE>0; log2++)
            VALUE = VALUE >> 1;
    endfunction

    integer index; 
    integer stages = log2(`WORD_WIDTH);

    //Stage 0
    wire    `WORD   w_outAdder_0,   w_carryOut_0,   w_propagate_0;
    
    for (index = 0; index < `WORD_WIDTH; index = index + 1) begin
        assign w_propagate_0[index] = i_A[index] | i_B[index];
        end

    full_adder  full_adder_U0   (i_A[0 ],   i_B[0 ],    i_carryIn,  w_outAdder_0[0],    w_carryOut_0[0]);

    generate
        for (index = 0; index < `WORD_WIDTH-1; index = index + 1) begin
            half_adder  adder_0 (
                i_A[index]          ,
                i_B[index]          ,
                w_outAdder_0[index] , 
                w_carryOut_0[index]
            );
        end
    endgenerate

    //Stage 1
    wire    [`WORD_WIDTH/2-1:0]    w_propagate_1,  w_generate_1;
 
    generate
        for (index = 0; index < `WORD_WIDTH/2-1; index = index + 2) begin
            processUnit processUnit_1 (
                w_propagate_0   [index*2+1] ,
                w_carryOut_0    [index*2+1] ,
                w_propagate_0   [index*2]   ,
                w_carryOut_0    [index*2]   ,
                w_propagate_1   [index]     ,
                w_generate_1    [index]
            );
        end
    endgenerate

    //Stages main body

    generate;
        for (int s=2; s<stages; s++) begin : Lvl
            wire    [`WORD_WIDTH/2-1:0]   propagatePre_w,   generatePre_w   ;
            wire    [`WORD_WIDTH/2-1:0]   propagatePost_w,  generatePost_w  ;

            if(s == 2)
                Lvl[2].propagatePre_w   =   w_propagate_1   ;
                Lvl[2].generatePre_w    =   w_generate_1    ;
            else 
                Lvl[s].propagatePre_w   =   Lvl[s-1].propagatePost_w ;
                Lvl[s].generatePre_w    =   Lvl[s-1].generatePost_w  ;
            end
                
            for (index = (2**(s-1)) +1); index < `WORD_WIDTH; index = index + 2) begin : PU
                processUnit processUnit_U (
                Lvl[s].propagatePre_w     [index],
                Lvl[s].generatePre_w      [index],
                Lvl[s].propagatePre_w     [index - 2**(s-1)],
                Lvl[s].generatePre_w      [index - 2**(s-1)],
                Lvl[s].propagatePost_w    [index],
                Lvl[s].generatePost_w     [index]
                );
            end
        end
    endgenerate

    //Last Stage 
    wire    [`WORD_WIDTH/2-1:0]   w_generate_7   ;
    generate
        for (index = 1; index < `WORD_WIDTH/2; index = index + 1) begin
             processUnitLastLayer processUnit_7 (
                w_propagate_0   [index*2],
                w_carryOut_0    [index*2],
                w_generate_1    [index-1],
                w_generate_7    [index-1]
            );
        end
    endgenerate

    //Sum

    assign  o_Out[0 ]   =   w_outAdder_0[0];
    for (index=1; index<`WORD_WIDTH; index++) begin
        assign  o_Out[index]   =   w_outAdder01_0[index] ^ w_carryOut_0[index-1];   
    end
    
    assign  o_set		=   o_Out[63];
    assign  overflow 	=	w_generate63_6;  
    
endmodule